#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DICOM to Video Converter
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–∏—é DICOM-—Ñ–∞–π–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ö–¢) –≤ –≤–∏–¥–µ–æ—Ñ–∞–π–ª.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–µ –∏ —Ü–≤–µ—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã. –í—Å—ë –ø—Ä–∏–≤–æ–¥–∏—Ç—Å—è –∫ grayscale –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.
–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Å –∏–º–µ–Ω–µ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.
"""

import os
import sys
import subprocess
import importlib.util
import datetime
import cv2
import numpy as np
import pydicom
from pydicom.pixel_data_handlers.util import apply_voi_lut, apply_color_lut

# ========================
# ‚öôÔ∏è –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
# ========================
DICOM_DIR = "CT_Series"        # –ü–∞–ø–∫–∞ —Å DCM-—Ñ–∞–π–ª–∞–º–∏
FPS = 10                       # –ö–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
USE_COLOR = False              # True ‚Äî –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Å–µ–≤–¥–æ—Ü–≤–µ—Ç (COLORMAP_JET), False ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å grayscale

# ========================
# üß∞ –§–£–ù–ö–¶–ò–Ø: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
# ========================
def install_package(package):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç —á–µ—Ä–µ–∑ pip, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."""
    try:
        spec = importlib.util.find_spec(package.split('==')[0].split('>=')[0])
        if spec is None:
            print(f"üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞–∫–µ—Ç: {package}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", package])
            print(f"‚úÖ {package} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        else:
            print(f"‚úÖ {package} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {package}: {e}")
        sys.exit(1)

# –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
REQUIRED_PACKAGES = [
    "pydicom",
    "opencv-python",
    "numpy",
    "pylibjpeg",
    "pylibjpeg-libjpeg",
    "pylibjpeg-openjpeg",
    "pillow"
]

print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
for package in REQUIRED_PACKAGES:
    install_package(package)

# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º pydicom, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ö–æ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
if importlib.util.find_spec("pydicom") is not None:
    import pydicom
    from pydicom.pixel_data_handlers.util import apply_voi_lut, apply_color_lut
else:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å pydicom –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    sys.exit(1)

print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

# ========================
# üìÇ –ó–ê–ì–†–£–ó–ö–ê –ò –°–û–†–¢–ò–†–û–í–ö–ê DICOM-–§–ê–ô–õ–û–í
# ========================
print("\nüìÇ –ß—Ç–µ–Ω–∏–µ DICOM-—Ñ–∞–π–ª–æ–≤...")

if not os.path.exists(DICOM_DIR):
    raise FileNotFoundError(f"–ü–∞–ø–∫–∞ '{DICOM_DIR}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ .dcm —Ñ–∞–π–ª—ã.")

files = [f for f in os.listdir(DICOM_DIR) if f.lower().endswith('.dcm')]
if not files:
    raise FileNotFoundError(f"–í –ø–∞–ø–∫–µ '{DICOM_DIR}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ .dcm —Ñ–∞–π–ª–æ–≤.")

datasets = []
for f in files:
    filepath = os.path.join(DICOM_DIR, f)
    try:
        ds = pydicom.dcmread(filepath)
        datasets.append(ds)
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {f}: {e}")

print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(datasets)} DICOM-—Ñ–∞–π–ª–æ–≤.")

# ========================
# üî¢ –°–û–†–¢–ò–†–û–í–ö–ê –ü–û InstanceNumber –∏–ª–∏ SliceLocation
# ========================
def sort_dicom_datasets(datasets):
    try:
        sorted_datasets = sorted(datasets, key=lambda x: int(x.InstanceNumber))
        print("‚úÖ –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ InstanceNumber")
        return sorted_datasets
    except:
        try:
            sorted_datasets = sorted(datasets, key=lambda x: float(x.SliceLocation))
            print("‚úÖ –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ SliceLocation")
            return sorted_datasets
        except:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫.")
            return datasets

datasets = sort_dicom_datasets(datasets)

# ========================
# üé• –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –í–ò–î–ï–û
# ========================
# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
OUTPUT_VIDEO = f"ct_scan_{timestamp}.mp4"

# ========================
# üñºÔ∏è –û–ë–†–ê–ë–û–¢–ö–ê –ö–ê–ñ–î–û–ì–û –°–†–ï–ó–ê
# ========================
print(f"\nüé¨ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {OUTPUT_VIDEO} ({FPS} FPS)...")

out = None  # VideoWriter –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞

for i, ds in enumerate(datasets):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        photometric_interpretation = ds.get("PhotometricInterpretation", "UNKNOWN")
        print(f"üñºÔ∏è  –§–∞–π–ª {i+1}: PhotometricInterpretation = {photometric_interpretation}")

        # –ß–∏—Ç–∞–µ–º –ø–∏–∫—Å–µ–ª–∏
        pixel_array = ds.pixel_array

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if photometric_interpretation in ['MONOCHROME1', 'MONOCHROME2']:
            img = apply_voi_lut(pixel_array, ds)
        elif photometric_interpretation == 'PALETTE COLOR':
            img = apply_color_lut(pixel_array, ds)
        elif photometric_interpretation in ['RGB', 'YBR_FULL', 'YBR_FULL_422', 'YBR_PARTIAL_422']:
            img = pixel_array
            if photometric_interpretation == 'YBR_FULL':
                img = cv2.cvtColor(img, cv2.COLOR_YCrCb2RGB)
            elif photometric_interpretation in ['YBR_FULL_422', 'YBR_PARTIAL_422']:
                img = cv2.cvtColor(img, cv2.COLOR_YUV2RGB_Y422)
        else:
            print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø '{photometric_interpretation}' ‚Äî –∏—Å–ø–æ–ª—å–∑—É—é –∫–∞–∫ –µ—Å—Ç—å.")
            img = pixel_array

        # ========================
        # üîÑ –ü–†–ò–í–ï–î–ï–ù–ò–ï –ö –ï–î–ò–ù–û–ú–£ –§–û–†–ú–ê–¢–£: –í–°–ï–ì–î–ê GRAYSCALE (–¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ)
        # ========================
        if len(img.shape) == 3:
            if img.shape[2] == 3:
                img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ grayscale
            elif img.shape[2] == 4:
                img = cv2.cvtColor(img, cv2.COLOR_RGBA2GRAY)

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 0-255 (–µ—Å–ª–∏ –µ—â—ë –Ω–µ uint8)
        if img.dtype != np.uint8:
            img_min, img_max = img.min(), img.max()
            if img_max != img_min:
                img = (img - img_min) / (img_max - img_min) * 255.0
            else:
                img = np.zeros_like(img)
            img = img.astype(np.uint8)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Å–µ–≤–¥–æ—Ü–≤–µ—Ç, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        is_color_frame = False
        if USE_COLOR:
            img = cv2.applyColorMap(img, cv2.COLORMAP_JET)
            is_color_frame = True

        # ========================
        # üìπ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø VideoWriter (–ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä)
        # ========================
        if out is None:
            frame_height, frame_width = img.shape[:2]
            frame_size = (frame_width, frame_height)
            out = cv2.VideoWriter(OUTPUT_VIDEO, cv2.VideoWriter_fourcc(*'mp4v'), FPS, frame_size, isColor=is_color_frame)
            if not out.isOpened():
                raise Exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VideoWriter. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –∏ –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–µ–∫–∞.")
            print(f"‚úÖ VideoWriter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {frame_size[0]}x{frame_size[1]}, —Ü–≤–µ—Ç–Ω–æ–µ: {is_color_frame}")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–¥—Ä
        out.write(img)

        if (i + 1) % 50 == 0:
            print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1} / {len(datasets)} –∫–∞–¥—Ä–æ–≤")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {i+1}: {e}")
        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ñ–∞–π–ª

# ========================
# üßπ –ó–ê–í–ï–†–®–ï–ù–ò–ï
# ========================
if out is not None:
    out.release()
    print(f"\nüéâ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {os.path.abspath(OUTPUT_VIDEO)}")
else:
    print("‚ùå –ù–∏ –æ–¥–∏–Ω –∫–∞–¥—Ä –Ω–µ –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

print("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")